package Shapes.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;

public class Square_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_gaismf_a(editorContext, node);
  }

  private EditorCell createCollection_gaismf_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_gaismf_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_gaismf_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gaismf_b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gaismf_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gaismf_d0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gaismf_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gaismf_f0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_gaismf_g0(editorContext, node));
    editorCell.addEditorCell(this.createComponent_gaismf_h0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_gaismf_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "square");
    editorCell.setCellId("Constant_gaismf_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_gaismf_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "x:");
    editorCell.setCellId("Constant_gaismf_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_gaismf_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("upperLeftX");
    provider.setNoTargetText("<no upperLeftX>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_upperLeftX");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_gaismf_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "y:");
    editorCell.setCellId("Constant_gaismf_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_gaismf_e0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("upperLeftY");
    provider.setNoTargetText("<no upperLeftY>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_upperLeftY");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_gaismf_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "size:");
    editorCell.setCellId("Constant_gaismf_f0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_gaismf_g0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("size");
    provider.setNoTargetText("<no size>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_size");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createComponent_gaismf_h0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "Shapes.editor.ShapeColor");
    return editorCell;
  }
}
